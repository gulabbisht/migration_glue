<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_form_alter().
 */
function migration_glue_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // If migration mapper form.
  if ($form_id == 'migration_admin_form') {
    $form['output']['#tree'] = TRUE;

    // Get source type.
    $source_type = $form['source']['data_source']['#default_value'];

    // In case of JSON/XML source type.
    if ($source_type == 'json' || $source_type == 'xml') {
      $form['source']['data_source_config_wrapper']['source']['read_directory'] = [
        '#type' => 'checkbox',
        '#title' => t('Is directory?'),
        '#description' => t('If checked, then will iterate all JSON/XML files in the given directory.')
      ];
    }

    $default_option_label = $form['migration_group']['#options']['default'];
    $form['migration_group']['#options'] = ['default' => $default_option_label];

    // Using 'default' migration group for all.
    // @todo - Make it generic.
    $form['migration_group']['#default_value'] = 'default';

    $form['output']['sample_output_yml'] = [
      '#type' => 'markup',
      '#markup' => '<div>In case you need to enhance the output YML, refer <a target="_blank" href="https://github.com/joshirohit100/migration_glue/blob/master/migration_sample_code.md">migration_sample_code.md</a> file.</div>',
      '#html' => TRUE,
    ];

    // Adding a submit button.
    $form['next_step'] = [
      '#type' => 'submit',
      '#value' => t('Go to next step'),
      '#validate' => ['_migration_glue_validate_handler'],
      '#submit' => ['_migration_glue_submit_handler'],
    ];
  }
}

/**
 * Custom validation handler.
 */
function _migration_glue_validate_handler(array &$form, FormStateInterface $form_state) {
  // Source type.
  $source_type = $form_state->getValue('data_source');

  // If XML or JSON.
  if ($source_type == 'json' || $source_type == 'xml') {
    $source = $form_state->getValue('data_source_config_wrapper')['source'];
    // Directory path.
    $dir_path = $source[$source_type . '_path'];
    // If not a valid directory, throw error.
    if ($source['read_directory'] && !is_dir($dir_path)) {
      $form_state->setErrorByName('data_source_config_wrapper][source][' . $source_type . '_path', t('Please provide a valid directory.'));
    }
    elseif($source['read_directory']) {
      // @todo: Need to revisit this once
      // https://www.drupal.org/project/migrate_plus/issues/2921374 is fixed.
      // Get all files from the directory of given type.
      $files = \Drupal::service('migration_glue.manager')->getFilesInDirectory($dir_path, $source_type);

      // If no file found in the given directory of given type.
      if (empty($files)) {
        $form_state->setErrorByName('data_source_config_wrapper][source][' . $source_type . '_path', t('No file available of the @type type in the @directory directory.', [
          '@type' => $source_type,
          '@directory' => $dir_path,
        ]));
      }
      else {
        $form_state->setValue(['data_source_config_wrapper', 'source', $source_type . '_path'], $files);
      }
    }
  }
}

/**
 * Custom submit handler.
 */
function _migration_glue_submit_handler(array &$form, FormStateInterface $form_state) {
  // Get exported output.
  $output = $form_state->getValue('output')['export'];
  // Parsed yml to array.
  $parsed_yml = Yaml::parse($output);

  // Register the migration in system.
  \Drupal::service('migration_glue.manager')->registerMigration($parsed_yml);

  // Adding status message.
  \Drupal::messenger()->addStatus(t('Migration @migration has been created successfully.', ['@migration' => $parsed_yml['id']]));

  // Redirect to next step.
  $form_state->setRedirect('migration_glue.run_migration', [
    'migration' => $parsed_yml['id'],
    'migration_group' => $parsed_yml['migration_group'],
  ]);
}
